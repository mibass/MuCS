#include "reco_uboone_mcc7.fcl"
#include "MuCSTrackTagger_module.fcl"
#include "analysistreemodule_microboone.fcl"
#include "MuCSMerger_uboone.fcl"
#include "sam_microboone.fcl"

@table::microboone_reco_mcc7_services

process_name: MuCSMerge

services:
{
  #Load the service that manages root files for histograms.
  TFileService: { fileName: "MuCSMerge.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 }     #default is one
  RandomNumberGenerator: {}                     #ART native random number generator
  user:         @local::microboone_services
  message:      @local::standard_info
  FileCatalogMetadata:  @local::art_file_catalog_data
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1            # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_MuCSMerge.root"    #default file name, can override from command line with -o or --output
   dataTier: "raw" 
} 
}

physics:
{
 producers:{MuCSMerger: @local::standard_mucsmerger
            MuCSReco: @local::standard_mucsreco}
 
 merge: [MuCSMerger, MuCSReco ]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [merge] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ stream1  ] 
}


DetectorClocksService.InheritClockConfig: false
services.user.DetectorClocksService.InheritClockConfig: false

physics.producers.MuCSMerger.MuCSFile: "/pnfs/uboone/persistent/users/mibass/MuCS/preselected/mega_micro_ana_171_0.333_0.root"

physics.producers.MuCSReco.InputDB: "MClib_bs30.sqlite"
physics.producers.MuCSReco.TopBoxy : "392.55"


